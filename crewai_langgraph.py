# -*- coding: utf-8 -*-
"""Crewai-Langgraph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LD3-Gn9vQxP2nuCtaUKztYjWVAEcxGDq

#Simple Crewai with weather and email assistant
"""

!pip install -U crewai crewai[tools] -q

!pip install langgraph langchain openai langchain_openai langchain_community pyowm -q

import os
os.environ['OPENAI_API_KEY'] = ""
os.environ["OPENWEATHERMAP_API_KEY"] = ""

from langchain_openai import ChatOpenAI
from langchain_community.utilities import OpenWeatherMapAPIWrapper
from crewai import Crew, Agent, Task
openai_llm = ChatOpenAI(temperature=0.4)
weather = OpenWeatherMapAPIWrapper()

from textwrap import dedent

# Define the Agents class with methods for email and weather agents.
class Agents:
    def email_agent(self):
        return Agent(
            role="Email Assistant",
            goal="To craft a professional email reply based on provided email content.",
            tools=[],
            backstory="You are an expert in email communications and always provide clear, professional responses.",
            verbose=True,
        )

    def weather_agent(self):
        return Agent(
            role="Weather Assistant",
            goal="To provide current weather details for a specified location.",
            tools=[],
            backstory="You are a knowledgeable weather expert who provides up-to-date weather conditions and alerts.",
            verbose=True,
        )

# Define the Tasks class with methods for generating email replies and fetching weather details.
class Tasks:
    def email_task(self, agent, email_content):
        return Task(
            description=dedent(
                f"""
                Please review the following email content and generate a professional reply:
                {email_content}
                """
            ),
            expected_output=dedent(
                """A professional email reply that addresses the points in the email content."""
            ),
            agent=agent,
        )

    def weather_task(self, agent, location):
        return Task(
            description=dedent(
                f"""
                Please provide current weather details for the following location:
                {location}
                """
            ),
            expected_output=dedent(
                """The current weather information, including temperature, weather conditions, and any relevant alerts."""
            ),
            agent=agent,
        )

# Sample data for email content and location query.
email_content = """
Dear Team,
I would like to inquire about the status of my application. Could you please provide an update on the current progress?
Thank you,
Alex
"""

location = "San Francisco, CA"

# Instantiate agents.
agents = Agents()
email_agent = agents.email_agent()
weather_agent = agents.weather_agent()

# Instantiate tasks.
tasks = Tasks()
email_reply_task = tasks.email_task(email_agent, email_content)
weather_info_task = tasks.weather_task(weather_agent, location)

# Instantiate the Crew with a sequential process (first email reply, then weather info).
crew = Crew(
    agents=[email_agent, weather_agent],
    tasks=[email_reply_task, weather_info_task],
)

try:
    # Kick off the process. If your CrewAI version uses kickoff(), use it.
    result = crew.kickoff()
except Exception as e:
    print(e)

print("Your Email and Weather AI Crew is complete!")
print("Results:", result)

"""#integrating with langgraph,crewai

"""

from typing import TypedDict
from crewai import Crew, Agent, Task
from textwrap import dedent
import os
import json
import requests
from langgraph.graph import Graph, END, StateGraph

# Define AgentState
class AgentState(TypedDict):
    messages: list[str]
    email: str
    query: str
    category: str

# Agents Class
class Agents:
    @staticmethod
    def classifierAgent():
        return Agent(
            role='Email Classifier',
            goal='You will be given an email and you have to classify the given email in one of these 2 categories: 1) Important 2) Casual',
            backstory='An email classifier expert.',
            verbose=True,
            allow_delegation=False,
        )

    @staticmethod
    def emailWriterAgent():
        return Agent(
            role='Email Writing Expert',
            goal="Write an email reply based on its classification (Professional for Important, Casual otherwise).",
            backstory='An email writer with expertise.',
            verbose=True,
            allow_delegation=False,
        )

    @staticmethod
    def weatherAgent():
        return Agent(
            role='Weather Expert',
            goal='Find weather information using an external API',
            backstory="A weather expert",
            verbose=True,
            allow_delegation=False,
        )

# Define Tasks
class Tasks:
    @staticmethod
    def classificationTask(agent, email):
        return Task(
            description=dedent(f"""Classify this email: {email}"""),
            agent=agent,
            expected_output="Email category as a string"
        )

    @staticmethod
    def writerTask(agent, email):
        return Task(
            description=dedent(f"""Generate a response to this email: {email}"""),
            agent=agent,
            expected_output="Concise email reply"
        )

    @staticmethod
    def weatherTask(agent, query):
        return Task(
            description=dedent(f"""Get weather info for: {query}"""),
            agent=agent,
            expected_output="Weather details"
        )

# Crew Execution
class EmailCrew:
    def __init__(self, email):
        self.email = email

    def run(self):
        classifierAgent = Agents.classifierAgent()
        writerAgent = Agents.emailWriterAgent()

        classifierTask = Tasks.classificationTask(agent=classifierAgent, email=self.email)
        writerTask = Tasks.writerTask(agent=writerAgent, email=self.email)

        crew = Crew(
            agents=[classifierAgent, writerAgent],
            tasks=[classifierTask, writerTask],
            verbose=True  # ✅ Corrected (should be True/False)
        )
        result = crew.kickoff()
        return result

# Nodes for Workflow
class Nodes:
    @staticmethod
    def writerNode(state):
        email = state["email"]
        emailCrew = EmailCrew(email)
        crewResult = emailCrew.run()
        messages = state["messages"]
        messages.append(crewResult)
        return {"messages": messages}

    @staticmethod
    def weatherNode(state):
        query = state["query"]
        weatherAgent = Agents.weatherAgent()
        weatherTask = Tasks.weatherTask(agent=weatherAgent, query=query)

        # Create a Crew for weather task execution
        crew = Crew(
            agents=[weatherAgent],
            tasks=[weatherTask],
            verbose=True  # ✅ Corrected (boolean value)
        )

        result = crew.kickoff()  # ✅ Correct way to execute task
        messages = state["messages"]
        messages.append(result)
        return {"messages": messages}

    @staticmethod
    def replyNode(state):
        query = state["query"]
        agent = openai_llm.invoke(f"""{query}""")
        messages = state["messages"]
        messages.append(agent.content)
        return {"messages": messages}

    @staticmethod
    def entryNode(state):
        input_text = state["query"]
        agent = openai_llm.invoke(f"""
        Categorize this input:
        {input_text}

        Categories:
        - email_query: For email responses
        - weather_query: For weather info
        - other: For anything else

        Return JSON with keys: category, email, query.
        """)
        response = json.loads(agent.content) if isinstance(agent.content, str) else agent.content
        return {'email': response["email"], 'query': response['query'], 'category': response['category']}

def where_to_go(state):
    cat = state['category']
    print("Category: ", cat)
    if cat == "email_query":
        return "email"
    elif cat == "weather_query":
        return "weather"
    else:
        return "reply"

# Workflow Graph
workflow = StateGraph(AgentState)
node = Nodes()

workflow.add_node('entryNode', node.entryNode)
workflow.add_node('weatherNode', node.weatherNode)
workflow.add_node("responder", node.replyNode)
workflow.add_node('emailNode', node.writerNode)

workflow.add_conditional_edges('entryNode', where_to_go, {
    "email": "emailNode",  #
    "weather": "weatherNode",
    "reply": "responder"
})

workflow.add_edge("weatherNode", END)
workflow.add_edge("responder", END)
workflow.add_edge("emailNode", END)

workflow.set_entry_point("entryNode")
app = workflow.compile()

# Sample Query Execution - Email
query = """
Can you reply to this email?

Hello,
Thank you for applying to XYZ company.
Can you share your previous CTC?
Thanks,
HR
"""

inputs = {"query": query, "messages": [query]}
result = app.invoke(inputs)
print("Agent Response:", result['messages'][-1])

# Sample Query Execution - Weather
query = "Is there any chance of rain in Delhi today?"
inputs = {"query": query, "messages": [query]}
result = app.invoke(inputs)
print("Weather Response:", result['messages'][-1])

# Sample Query Execution - Weather
query = "hi"
inputs = {"query": query, "messages": [query]}
result = app.invoke(inputs)
print("Weather Response:", result['messages'][-1])